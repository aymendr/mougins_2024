<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.13">
      <siteName>https://driraaymen.atlassian.net/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3883.vb_3ff2a_e3eea_f">
    <script>pipeline {
    agent any
    
    environment {
        NEXUS_VERSION = &quot;nexus3&quot;
        NEXUS_PROTOCOL = &quot;http&quot;
        NEXUS_URL = &quot;192.168.56.201:8081&quot;
        NEXUS_REPOSITORY = &quot;vprofile-repo&quot;
        NEXUS_CREDENTIAL_ID = &quot;nexus-credentials&quot;
    }    
    tools{
        maven &quot;maven3&quot;
        jdk &quot;jdk-17&quot;
    }
    stages {
        stage(&apos;Clone code&apos;) {
            steps {
                git branch: &apos;main&apos;, url: &apos;https://github.com/aymendr/vprofile-project&apos;
            }
        }
        stage(&apos;Build&apos;) {
            steps {
                sh &apos;mvn clean install -DskipTests&apos;
            }
            post{
                success{
                    sh &apos;echo &quot;archiving artifacts&quot;&apos;
                    archiveArtifacts artifacts: &apos;**/*.war&apos;, followSymlinks: false
                }
            }
        }
        stage(&apos;UNIT TESTS&apos;){
            steps{
                sh &apos;mvn test&apos;
            }
        }
        stage(&apos;Check Style&apos;) {
            steps {
                sh &apos;mvn checkstyle:checkstyle&apos;
            }
        }
        stage(&apos;SonarQube Analysis&apos;) {
            steps {
                // Execute SonarQube analysis
                script {
                    def scannerHome = tool &apos;sonarTool&apos;
                    withSonarQubeEnv(&apos;sonar_server&apos;) {
                        sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/&quot;
                    }
                }
            }
        }
        stage(&quot;Quality Gate&quot;) {
            steps {
              timeout(time: 1, unit: &apos;HOURS&apos;) {
                waitForQualityGate abortPipeline: true
              }
            }
        }   
        stage(&apos;Upload to Nexus&apos;) {
            steps {
                script {
                    // Définir le chemin vers l&apos;artefact généré
                    def artifactPath = &quot;target/my-app-1.0.jar&quot;
                    def artifactGroup = &quot;com.visualpathit&quot;
                    def artifactName = &quot;vprofile&quot;
                    def artifactVersion = &quot;${env.BUILD_ID}-${env.BUILD_TIMESTAMP}&quot;

                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL,
                        groupId: artifactGroup,
                        version: artifactVersion,
                        repository: NEXUS_REPOSITORY,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            [artifactId: artifactName,
                             classifier: &apos;&apos;,
                             file: &apos;target/vprofile-v2.war&apos;,
                             type: &apos;war&apos;]
                        ]
                    )
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>